---

- hosts: primary
  tasks:
    - name: Gather needed facts
      setup:
        gather_subset: "!min,user_dir,distribution"
      when:
        - ansible_user_dir is not defined
        - ansible_distribution is not defined

    - when:
        - ansible_distribution == 'CentOS'
        - ansible_distribution_major_version|int == 7
      become: true
      block:

        - name: Install RDO repos for getting packages for CentOS 7
          yum:
            name: https://www.rdoproject.org/repos/rdo-release.rpm

        - name: Update Git to v2 in CentOS 7 - remove old git
          yum:
            name: git
            state: absent

        - name: Update Git to v2 in CentOS 7 - install repo
          yum:
            name: https://repo.ius.io/ius-release-el7.rpm

        - name: Update Git to v2 in CentOS 7 - install git
          yum:
            name: git224


    - name: Check if pip is installed
      shell: command -v pip > /dev/null 2>&1
      ignore_errors: true
      changed_when: false
      register: pip_exists

    - when: pip_exists.rc != 0
      name: Install pip
      block:
        - when: ansible_distribution == "CentOS"
          name: Install EPEL
          become: true
          package:
            name: epel-release
        - name: Install pip
          become: true
          package:
            name:
              - python{{ '3' if ansible_distribution_major_version|int == 8 else '' }}-pip

    - name: Install bindep
      register: result_bindep
      until: result_bindep is success
      pip:
        name: bindep
        extra_args: --user --force
      retries: 3
      delay: 5

    # reproducer_role_top_dir evaluates to "reproducer_role_top_dir":
    - name: Set fact reproducer_role_top_dir
      set_fact:
        reproducer_role_top_dir: >-
          {{ reproducer_role_top_dir | default(playbook_dir + '/../..') }}

    - name: Print top dir
      debug:
        var: reproducer_role_top_dir

    # Adding when to this command for linting error
    # https://github.com/ansible/ansible-lint/issues/165
    # Pipe true because bindep always returns code 1 (error)
    # when packages are missing
    - name: Discover packages that are not installed
      shell: |
        export PATH=$PATH:$HOME/.local/bin/
        bindep -b -f {{ reproducer_role_top_dir }}/bindep.txt
      register: package_list
      failed_when: false
      changed_when: false

    - name: Install rpms from bindep
      become: true
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - "{{ package_list.stdout_lines }}"

    - name: Install python dependencies
      register: result
      until: not result.failed|bool
      pip:
        requirements: "{{ reproducer_role_top_dir }}/requirements.txt"
        extra_args: --user --force
      retries: 3
      delay: 5

    - when: container_mode == 'docker'
      block:

        - name: Find out docker group name
          shell: |
            set -euo pipefail
            grep docker /etc/group | cut -d":" -f1 | head -1
          register: docker_group
          changed_when: false
          failed_when: false

        - when: not docker_group.stdout
          block:
            - name: Create docker group
              become: true
              group:
                name: docker
                state: present

            - name: Storing new created docker group
              set_fact:
                docker_group:
                  stdout: docker

        - name: Check if user is in docker group
          command: "groups {{ ansible_user }}"
          register: user_groups
          changed_when: false

        - name: Add user to docker group
          become: true
          user:
            name: '{{ ansible_user }}'
            groups: '{{ docker_group.stdout }}'
            append: true
          register: groupadd
          when: "docker_group.stdout not in user_groups.stdout"

        # check if
        #  1. empty file
        #  2. {} in file, 3 chars
        #  3. no file
        - name: Check if docker configuration file already exists
          stat:
            path: /etc/docker/daemon.json
          register: docker_daemon_file

        - name: Create docker configuration if missing or empty
          become: true
          copy:
            content: |
              {
              "group": "{{ docker_group.stdout }}",
              }
            dest: /etc/docker/daemon.json
          register: docker_config
          when:
            - (not docker_daemon_file.stat.exists|bool) or ("docker_daemon_file.stat.size <= 3")

        # check if docker is configured in docker_daemon
        - name: Fail if daemon file is incorrectly configured for the reproducer
          shell: >-
            if grep "group" /etc/docker/daemon.json; then
                grep '\"{{ docker_group.stdout }}\"' /etc/docker/daemon.json
            fi
          failed_when: false
          when:
            - docker_daemon_file.stat.exists|bool
            - "docker_daemon_file.stat.size >= 3"

        - name: Reload docker if config was changed
          become: true
          service:
            name: docker
            state: reloaded
          when:
            - docker_config is defined
            - docker_config is changed

        - name: Start and enable docker
          become: true
          service:
            name: docker
            state: started
            enabled: true

        - name: reset ssh connection to allow user changes to affect
          meta: reset_connection
