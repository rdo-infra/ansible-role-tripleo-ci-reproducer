---
- hosts: primary
  tasks:
    - name: Gather needed facts
      setup:
        gather_subset: "!min,user_dir,distribution"
      when:
        - ansible_user_dir is not defined
        - ansible_distribution is not defined
    - name: Check if pip is installed
      shell: command -v pip > /dev/null 2>&1
      ignore_errors: true
      changed_when: false
      register: pip_exists

    - when: pip_exists.rc != 0
      name: Install pip
      block:
        - when: ansible_distribution == "CentOS"
          name: Install EPEL
          become: true
          package:
            name: epel-release
        - name: Install pip
          become: true
          package:
            name:
              - python-pip

    - name: Read bindep file contents
      set_fact:
        bindep_contents: "{{ lookup('file', '{{ playbooks_dir }}/bindep_python2.txt') }}"

    - include: install-packages.yaml package="{{ item }}"
      with_items: "{{ bindep_contents }}"

    - name: Read requirements.txt file contents
      set_fact:
        requirements_contents: "{{ lookup('file', '{{ playbooks_dir }}/requirements.txt') }}"

    - name: Install python dependencies
      pip:
        name: "{{ requirements_contents }}"
        extra_args: --user

    - name: Find out docker group name
      shell: grep docker /etc/group | cut -d":" -f1 | head -1
      register: docker_group
      changed_when: false

    - when: not docker_group.stdout
      block:
        - name: Create docker group
          become: true
          group:
            name: docker
            state: present
        - name: Storing new created docker group
          set_fact:
            docker_group:
              stdout: docker

    - name: Check if user is in docker group
      command: "groups {{ ansible_user }}"
      register: user_groups
      changed_when: false

    - when: "docker_group.stdout not in user_groups.stdout"
      block:
        - name: Add user to docker group
          become: true
          user:
            name: '{{ ansible_user }}'
            groups: '{{ docker_group.stdout }}'
            append: true
          register: groupadd

    - name: reset ssh connection to allow user changes to affect
      meta: reset_connection

    - name: Check if docker configuration file already exists
      stat:
        path: /etc/docker/daemon.json
      register: docker_daemon_file

    - name: Check if the daemon.json contains the group line
      lineinfile:
        dest: /etc/docker/daemon.json
        line: "group: {{ docker_group.stdout }}"
      check_mode: true
      register: existing_docker_group
      when: docker_daemon_file.stat.exists|bool

    - name: Create docker configuration file
      become: true
      blockinfile:
        block: |
          {
          "group": "{{ docker_group.stdout }}",
          }
        dest: /etc/docker/daemon.json
        create: true
      register: docker_config
      when:
        - docker_daemon_file.stat.exists|bool
        - existing_docker_group is defined
        - existing_docker_group is changed

    - name: Reload docker if config was changed
      become: true
      service:
        name: docker
        state: reloaded
      when:
        - docker_config is defined
        - docker_config is changed

    - name: Start and enable docker
      become: true
      service:
        name: docker
        state: started
        enabled: true
      when:
        - docker_config is defined
        - docker_config is changed

