---
- name: Install reproducer
  copy:
    src: "{{ item }}"
    dest: "{{ install_path }}"
  with_items:
    - playbooks
    - projects
    - httpd.conf

- name: Generate docker compose config
  template:
    src: docker-compose.yaml.j2
    dest: "{{ install_path }}/docker-compose.yaml"

- name: Create directories
  file:
    name: "{{ install_path }}/{{ item }}"
    state: directory
  with_items:
    - etc_nodepool
    - etc_zuul

- name: Generate zuul configuration
  template:
    src: "{{ item }}.j2"
    dest: "{{ install_path }}/etc_zuul/{{ item }}"
  with_items:
    - zuul.conf
    - main.yaml
    - scheduler-logging.yaml
    - executor-logging.yaml
    - fingergw-logging.yaml
    - web-logging.yaml
    - merger-logging.yaml

- name: Generate zuul ssh key
  shell: |
    if [ ! -f {{ install_path }}/zuul_ssh_rsa ]; then
      ssh-keygen -m PEM -t rsa -f {{ install_path }}/zuul_ssh_rsa
    fi

- name: Read zuul tenants config
  set_fact:
    zuul_tenants: "{{ lookup('file', install_path + '/etc_zuul/main.yaml') | from_yaml }}"
- name: Select tenant
  set_fact:
    zuul_tenant_source: "{{ zuul_tenants.0.tenant.source }}"
- name: Get external gerrit servers
  set_fact:
    external_gerrits: "{{ zuul_tenant_source | reject('equalto', 'gerrit') | list }}"

- name: Clone projects from external gerrit servers
  include_tasks: clone-projects.yaml
  with_items: "{{ external_gerrits }}"
  loop_control:
    loop_var: gerrit_server
- name: Generate secrets.env
  vars:
    id_rsa_b64: "{{ lookup('file', install_path + '/zuul_ssh_rsa') | b64encode }}"
  template:
    src: secrets.env.j2
    dest: "{{ install_path }}/secrets.env"
    mode: 0600

- name: Make path for pki ca-bundle.crt
  file:
    path: "{{ install_path }}/etc/pki/tls/certs"
    state: directory

- name: Install pki
  copy:
    src: /etc/pki/tls/certs/ca-bundle.crt
    dest: "{{ install_path }}/etc/pki/tls/certs/ca-bundle.crt"

- name: Setup nodepool provider
  include_tasks: "{{ nodepool_provider }}/main.yaml"
  when: nodepool_provider != "host" and setup_nodepool

- name: Generate nodepool main configuration
  template:
    src: "nodepool-{{ nodepool_provider }}.yaml.j2"
    dest: "{{ install_path }}/etc_nodepool/nodepool.yaml"

- name: Generate nodepool logs configuration
  template:
    src: "launcher-logging.yaml.j2"
    dest: "{{ install_path }}/etc_nodepool/launcher-logging.yaml"
